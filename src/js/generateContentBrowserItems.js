// generateContentBrowserItems.js

const fs = require('fs')
const path = require('path')
const { exec } = require('child_process')
const fsExtra = require('fs-extra') // Import the fs-extra package

function generateContentBrowserItems() {
	// Example to run: npm run generateContentBrowserItems city true

	const folder = process.argv.slice(2)[0] // Get the arguments passed to the script
	const generateThumnails = String(process.argv.slice(2)[1]).toLowerCase() === 'true' // Get the arguments passed to the script

	if (!folder.length) {
		console.error('No arguments given')
		return
	}

	const directory = `/content-browser/${folder}`
	const baseDirectory = `./public${directory}`

	function capitalizeWords(inputString) {
		return inputString.replace(/\b\w/g, (match) => match.toUpperCase())
	}

	// Clear the existing file by writing an empty object
	fs.writeFileSync(`src/js/ContentBrowserItems/${folder}ContentBrowserItems.js`, `export default {};`)

	fs.readdir(baseDirectory, (err, fileNames) => {
		if (err) {
			console.error('Error reading the directory:', err)
			return
		}

		const glbFiles = fileNames.filter((file) => path.extname(file) === '.glb')

		const newObj = {}

		glbFiles.forEach((fileName) => {
			const nameWithoutExtension = fileName.replace(/\..+$/, '')

			newObj[nameWithoutExtension] = {
				path: `${directory}/${fileName}`,
				thumbnail: `${directory}/thumbnails/${nameWithoutExtension}.png`,
				displayName: capitalizeWords(nameWithoutExtension.replace(/_/g, ' ')),
				type: 'model',
				modelType: `${folder}`,
				hudModelRot: [0, 0, 0],
			}
		})

		const generatedCode = `
// Generated by generateContentBrowserItems.js

/* eslint-disable import/no-anonymous-default-export */
export default ${JSON.stringify(newObj, null, 2)};
		`

		fs.writeFileSync(`src/js/ContentBrowserItems/${folder}ContentBrowserItems.js`, generatedCode)

		console.log(`File names pushed to allModels and saved to ContentBrowserItems/${folder}ContentBrowserItems.js`)

		if (!generateThumnails) return

		// Clear the thumbnails directory
		fsExtra.emptyDirSync(`${baseDirectory}/thumbnails`)
		let generateThumnailsString = ''

		glbFiles.forEach((fileName, index) => {
			const nameWithoutExtension = fileName.replace(/\..+$/, '')

			let string = `npx screenshot-glb -i public${directory}/${nameWithoutExtension}.glb -o public${directory}/thumbnails/${nameWithoutExtension} --width 100 --height 100 `

			// npx screenshot-glb -i public/content-browser/city/skyscraperA2.glb -o public/content-browser/city/test/skyscraperA2 --width 200 --height 200

			generateThumnailsString = generateThumnailsString + '&& ' + string
			if (index === 0) {
				generateThumnailsString = string
			} else {
				generateThumnailsString = generateThumnailsString + '&& ' + string
			}
		})

		exec(generateThumnailsString, (error, stdout, stderr) => {
			if (error) {
				console.error('Error executing screenshot-glb:', error)
				return
			}
			console.log('Screenshot-glb output:', stdout)
			// console.log(generateThumnailsString)
		})
	})
}

generateContentBrowserItems()
